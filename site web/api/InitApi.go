package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

var Token string

// Demande a l'api son corps sous un format JSON et le met dans une structure
func RequestApi(apiURL string) {
	//Initialisation du client
	httpClient := http.Client{
		Timeout: time.Second * 2, //Timeout après 2 seconds
	}
	//Création de la reguête HTTP vers l'api
	req, errReq := http.NewRequest("GET", apiURL, nil)
	if errReq != nil {
		fmt.Println("Error creating request :", errReq.Error())
		os.Exit(1)
	}
	//Ajoute d'une métadonnée dans l'header pour avoir l'autorisation d'émettre une requette sur l'api de spotify
	req.Header.Set("Authorization", "Bearer "+Token)

	//Exécution de la requête HTTP vers l'api
	resp, errRes := httpClient.Do(req)
	if resp.Body != nil {
		defer resp.Body.Close()
	} else {
		fmt.Println("Error creating response :", errRes.Error())
		os.Exit(2)
	}

	//Lecture du corps de la requête HTTP
	body, errBody := io.ReadAll(resp.Body)
	if errBody != nil {
		fmt.Println("Error reading response body :", errBody.Error())
		os.Exit(3)
	}
	//Test pour savoir dans quel structure je met mon JSON
	if apiURL == "https://api.spotify.com/v1/artists/3IW7ScrzXmPvZhB27hmfgy/albums?market=FR" {
		//Décodage des données JSON dans une structure
		json.Unmarshal(body, &Rap2)
	} else {
		json.Unmarshal(body, &Rap1)
	}
}

/* Recharge le token s'il n'est plus bon d'accès (token usage de 1H)
Grosse aide de stackOverflow donc je pense il y a moyen de l'opti*/

func ReloadApi() {
	//URL de l'api de Spotify pour avoir le token
	urlToken := "https://accounts.spotify.com/api/token"
	const clientId = "b2717725a58e4d6faccd1ee5fd5bd55b" //Pas touche les miens
	const clientSecret = "67c6ede35f3846bc95c2093a4d6e232c"

	httpClient := http.Client{
		Timeout: time.Second * 2,
	}
	//Création du corps de ma requête pour avoir les accès au token
	BodyReq := bytes.NewBufferString("grant_type=client_credentials&client_id=" + clientId + "&client_secret=" + clientSecret)

	///Création de la reguête HTTP vers l'api en POST avec l'url du token et le corps de ma requête
	req, errReq := http.NewRequest("POST", urlToken, BodyReq)
	if errReq != nil {
		fmt.Println("Error creating request :", errReq.Error())
		os.Exit(1)
	}
	//Metadonné nécessaire dans le header pour une requête POST
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, errRes := httpClient.Do(req)
	if resp.Body != nil {
		defer resp.Body.Close()
	} else {
		fmt.Println("Error creating response :", errRes.Error())
		os.Exit(2)
	}
	//Décode du JSON dans une map (J'ai pas réussi à le mettre dans une classe donc c'est la seconde solution que j'ai trouvé)
	var reponseMap map[string]interface{}

	decoder := json.NewDecoder(resp.Body)
	errJSON := decoder.Decode(&reponseMap)
	if errJSON != nil {
		fmt.Println("Error reading JSON :", errJSON.Error)
		os.Exit(4)
	}

	Token = reponseMap["access_token"].(string)
}
